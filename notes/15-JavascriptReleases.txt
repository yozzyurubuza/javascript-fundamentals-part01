Javascript Releases: ES5, ES6+, and ESNEXT

History of Javascript:

1995:
*Brendan Eich - created the very first version of JavaScript in just 10 days, it was called Mocha, but already had many fundamental features of modern JavaScript.

1996:
*Mocha changes to LiveScript and then to JavaScript, in order to attract Java developers, however, JavaScript has almost nothing to do with Java. Just for marketing reasons.

*Microsoft launches IE, copying JavaScript from Netscape, and calling it JScript.

1997:
*With a need to standardize the language, ECMA releases ECMAScript 1 (ES1), the first official standard for JavaScript (ECMAScript is the standard (How we should write JS codes), JavaScript the language in practice);

2009: 
*ES5 (ECMAScript 5) is released with lots of great new features;

2015:
*ES6/ES2015 (ECMAScript 2015) was released: the biggest update to the language ever.

*ECMAScript changes to an annual release cycle in order to ship less features per update, easier to keep updated with the changes.


Backwards Compatibility: Don't Break the web

*Modern Javascript code are backwards compatible.

*Old features are never removed,
*Not really new versions, just incremental updates (releases)
*Websites keep working forever!

*JavaScript is not forwards compatible.


How to use Modern JavaScript Today

*During Development: Simply use the latest Google Chrome

*During production: Use Babel to transpile and polyfill your code (converting back to ES5 to ensure browser compatibility for all users).

*ES5 - Fully supported in all browsers (down to IE 9 from 2011)
     - Ready to be used today

*ES6/ES2015/ES2020 - ES6+: Well supported in all modern browsers
                  - No support in older browsers
                  - Can use most features in production with 
                    transpiling and polyfilling.

*ES2021 - ESNext: Future versions of the language (new feature
                  proposals that reach Stage 4)
        - Can already use some features in production with 
          transpiling and polyfilling.

        - Browsers already implement new feature even if it's
          still in Stage 3. 


Modern JavaScript from the Beginning

*Learn modern JavaScript from the beginning!
*But also learn how some things used to be done before modern JavaScript (e.g const & let vs var and function constructors vs ES6 class).

3 Reasons why we should not forget the Good Ol' JavaScript:

*You will better understand how JavaScript actually works.
*Many tutorials and code you find online today are still in ES5
*When working on old codebases, these will be written in ES5.

